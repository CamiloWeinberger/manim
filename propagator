import numpy



class Prop2PSF_torch():
    device = phaseMap.device  
    nTheta = torch.tensor(np.int16(np.round(2*math.pi*wfs.samp*wfs.modulation)),device=device)
    PyrQ  = torch.zeros((wfs.fovInPixel,wfs.fovInPixel),device=device)
    pupil = torch.from_numpy(wfs.pupil).to(device)
    pyrMask = UNZ(UNZ(torch.tensor(wfs.pyrMask,dtype=torch.complex64,device=device),0),0)  
    pyrPupil = pupil*torch.exp(1j*phaseMap)
    subscale = 1/(2*wfs.samp)
    #sx = torch.round(wfs.fovInPixel*subscale).to(torch.int16)   
    sx = torch.round(torch.tensor(wfs.fovInPixel*subscale)).to(torch.int16)   
    npv = ((wfs.fovInPixel-sx)/2).to(torch.int16)
    PyrQ = torch.nn.functional.pad(pyrPupil,(npv,npv,npv,npv), "constant", 0)
    buf = torch.fft.fft2(PyrQ)
    buf = torch.fft.fftshift(buf.abs())**2
    return(buf)